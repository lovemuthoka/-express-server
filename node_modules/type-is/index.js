const express = require('express');
const app = express();
const PORT = 3000;

// Middleware to parse JSON bodies
app.use(express.json());

// Mock user data
const users = [
    { username: 'testuser', password: 'testpassword' }
];

// User Authentication Route
app.post('/api/auth/login', (req, res) => {
    const { username, password } = req.body;

    // Find the user in the mock data
    const user = users.find(u => u.username === username && u.password === password);
    
    // Validate credentials
    if (user) {
        res.json({ message: 'Login successful!' });
    } else {
        res.status(401).json({ message: 'Invalid credentials' });
    }
});

// Example Expense Management Routes
let expenses = [];

app.get('/api/expenses', (req, res) => {
    res.json(expenses);
});

app.post('/api/expenses', (req, res) => {
    const { userId, amount, date, category } = req.body;
    const id = expenses.length + 1;
    const newExpense = { id, userId, amount, date, category };
    expenses.push(newExpense);
    res.status(201).json(newExpense);
});

app.put('/api/expenses/:id', (req, res) => {
    const { id } = req.params;
    const { amount, date, category } = req.body;

    const expense = expenses.find(exp => exp.id === parseInt(id));
    if (expense) {
        expense.amount = amount || expense.amount;
        expense.date = date || expense.date;
        expense.category = category || expense.category;
        res.json(expense);
    } else {
        res.status(404).json({ message: 'Expense not found' });
    }
});

app.delete('/api/expenses/:id', (req, res) => {
    const { id } = req.params;
    expenses = expenses.filter(exp => exp.id !== parseInt(id));
    res.status(204).send();
});

// Basic error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// Start the Express.js server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
